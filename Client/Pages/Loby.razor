@page "/loby"
@using chatApp.Client.Service;
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthStateProvider


<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">



<style>
    .lobby-box {
    width: 75vh;
    height: 70vh;
    padding: 20px;
    border-radius: 10px;
    background-color: #f8f9fa;
    display: flex;
    flex-direction: column;
    position: relative;
    }

    .rooms-list {
    flex-grow: 1;
    overflow-y: auto;
    }

    .room-item {
    padding: 10px;
    background-color: #fff;
    border: 1px solid #ddd;
    border-radius: 5px;
    }
</style>

<div class="lobby-box">
    <h3 class="text-center mb-4">Lobby</h3>
    <h5>Salas Disponíveis</h5>
    <ul class="list-unstyled rooms-list">
        @if (availableRooms == null)
        {
            <li class="alert alert-info">Carregando salas...</li>
        }
        else if (availableRooms.Count == 0)
        {
            <li class="alert alert-warning">Nenhuma sala disponível.</li>
        }
        else
        {
            @foreach (var room in availableRooms)
            {
                <li class="room-item mb-3">
                    <div class="d-flex justify-content-between align-items-center">
                        <span>@room</span>
                        <button class="btn btn-primary" @onclick="() => EnterRoom(room)">Entrar</button>
                    </div>
                </li>
            }
        }
    </ul>   
    <button class="btn btn-outline-primary mt-3" @onclick="CreateRoom">Criar Sala</button>
    <button class="btn btn-outline-danger mt-3" @onclick="SignOut">Sair</button>
</div>

@code {
    [Inject]
    public required RoomManager roomManager { get; set; }

    [Inject]
    public HttpClient HttpClient { get; set; } = default!;

    [Inject]
    public IJSRuntime JSRuntime { get; set; } = default!;


    public required List<string> availableRooms;
    private string selectedRoom = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        availableRooms = await roomManager.GetAvailableRoomsAsync();
    }

    private async Task EnterRoom(string room)
    {
        selectedRoom = room;

 
        if (await roomManager.IsPublicRoomAsync(room)) // Sala pública (sem senha)
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Sucesso", "Entrando na sala pública...", "success");
            Navigation.NavigateTo($"/chat/{Uri.EscapeDataString(room)}");
            return;
        }

        // Se não for pública, pede senha
        var result = await JSRuntime.InvokeAsync<string>("validateModalRoom");

        if (!string.IsNullOrEmpty(result))
        {
            var isValid = await roomManager.ValidateRoomPasswordAsync(room, result);

            if (isValid)
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Sucesso", "Entrando na sala...", "success");
                Navigation.NavigateTo($"/chat/{Uri.EscapeDataString(room)}");
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Erro", "Senha incorreta!", "error");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("Swal.fire", "Aviso", "Entrada cancelada", "info");
        }
    }


    private async Task CreateRoom()
    {
        var result = await JSRuntime.InvokeAsync<RoomData>("showCreateRoomModal");

        if (result != null && !string.IsNullOrEmpty(result.roomName))
        {
            // Usar o serviço para criar a sala
            var isCreated = await roomManager.CreateRoomAsync(result.roomName, result.Password);

            if (isCreated)
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Sucesso", "Sala criada com sucesso!", "success");
                availableRooms = await roomManager.GetAvailableRoomsAsync();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", "Erro", "Erro ao criar sala!", "error");
            }
        }
    }

    public class RoomData
    {
        public string roomName { get; set; } = "";
        public string? Password { get; set; }
    }

    private async Task SignOut()
    {
        await JSRuntime.InvokeVoidAsync("removeCookie", "authToken");
        Navigation.NavigateTo("/login");
    }
}
