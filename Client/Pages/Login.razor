@page "/login"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JSRuntime



<HeadContent>
    <link rel="stylesheet" href="css/autenticationForm.css">
</HeadContent>



<div class="login-container">
    <div class="login-header">
        <i class="fa fa-user"></i> Entrar no chat da galera da TI
    </div>
    <hr>

    <EditForm Model="@loginModel" OnValidSubmit="@HandleLogin">
        <DataAnnotationsValidator />

        <div class="form-group input-icon-left">
            <i class="fa fa-envelope"></i>
            <InputText type="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Digite seu email" required />
        </div>

        <div class="form-group input-icon-left">
            <i class="fa fa-lock"></i>
            <InputText type="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Digite sua senha" required />
        </div>

        <button type="submit" class="btn btn-primary">Entrar</button>
    </EditForm>

    <div class="login-footer">
        <span>Não tem uma conta? <a href="/register">Registre agora</a></span>
    </div>
    <hr>
    <div class="login-footer">
        <span>Esqueceu sua senha? <a href="#">Redefinir senha</a></span>
    </div>
</div>

@code {
    private LoginModel loginModel = new();

    protected override async Task OnInitializedAsync()
    {
        // Verifica se o access token está presente no cookie
        var accessToken = await JSRuntime.InvokeAsync<string>("getCookie", "accessToken");

        Console.WriteLine(accessToken);

        // Se o access token não estiver presente ou for inválido, tenta renovar o token
        if (string.IsNullOrEmpty(accessToken))
        {
            await TryRefreshToken();
        }
        else
        {
            // Se o access token está presente, verifica se ele é válido
            var isValid = await CheckTokenValidity(accessToken);
            if (isValid)
            {
                Navigation.NavigateTo("/chat", true); // Redireciona para o chat se o token for válido
            }
            else
            {
                // Tenta renovar o token caso o access token seja inválido
                await TryRefreshToken();
            }
        }
    }


    private async Task HandleLogin()
    {
        var errorMessage = string.Empty;

        try
        {
            var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/login")
                {
                    Content = JsonContent.Create(loginModel)
                };
            request.Headers.Add("Accept", "application/json");

            var response = await Http.SendAsync(request, HttpCompletionOption.ResponseHeadersRead);

            if (response.IsSuccessStatusCode)
            {
                // Desserializa a resposta para obter access token e refresh token
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                var accessToken = authResponse?.Token;
                var refreshToken = authResponse?.RefreshToken;

                if (!string.IsNullOrEmpty(accessToken) && !string.IsNullOrEmpty(refreshToken))
                {
                    // Armazena os tokens nos cookies
                    await JSRuntime.InvokeVoidAsync("setCookie", "accessToken", accessToken, 1); // 1 dia (ajuste conforme necessário)
                    await JSRuntime.InvokeVoidAsync("setCookie", "refreshToken", refreshToken, 7); // 7 dias

                    Console.WriteLine($"Access Token: {accessToken}");
                    Console.WriteLine($"Refresh Token: {refreshToken}");

                    await JSRuntime.InvokeVoidAsync("Swal.fire", new
                    {
                        title = "Usuário autenticado!",
                        text = "Login realizado com sucesso.",
                        icon = "success",
                        timer = 1500,
                        showConfirmButton = false
                    });

                    Navigation.NavigateTo("/chat", true);
                }
                else
                {
                    Console.WriteLine("Access token ou refresh token não encontrado na resposta.");
                }
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("Swal.fire", new
                {
                    title = "Erro!",
                    text = "Credenciais inválidas. Tente novamente.",
                    icon = "error",
                    confirmButtonText = "OK"
                });

                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Erro no login: {response.StatusCode} - {errorContent}";
                Console.WriteLine(errorMessage);
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erro: {ex.Message}";
            Console.WriteLine(errorMessage);

            await JSRuntime.InvokeVoidAsync("Swal.fire", new
            {
                title = "Erro!",
                text = "Ocorreu um erro ao tentar fazer login.",
                icon = "error",
                confirmButtonText = "OK"
            });
        }
    }

    private async Task<bool> CheckTokenValidity(string token)
    {
        try
        {
            var request = new HttpRequestMessage(HttpMethod.Get, "api/auth/check-auth");
            request.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);

            var response = await Http.SendAsync(request);
            return response.IsSuccessStatusCode;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao verificar token: {ex.Message}");
            return false;
        }
    }

    private async Task TryRefreshToken()
    {
        var accessToken = await JSRuntime.InvokeAsync<string>("getCookie", "accessToken");
        var refreshToken = await JSRuntime.InvokeAsync<string>("getCookie", "refreshToken");

        if (string.IsNullOrEmpty(accessToken) || string.IsNullOrEmpty(refreshToken))
        {
            Console.WriteLine("Tokens não encontrados para renovação.");
            return;
        }

        try
        {
            var refreshRequest = new RefreshTokenRequest
                {
                    AccessToken = accessToken,
                    RefreshToken = refreshToken
                };

            var request = new HttpRequestMessage(HttpMethod.Post, "api/auth/refresh")
                {
                    Content = JsonContent.Create(refreshRequest)
                };
            request.Headers.Add("Accept", "application/json");

            var response = await Http.SendAsync(request);

            if (response.IsSuccessStatusCode)
            {
                var authResponse = await response.Content.ReadFromJsonAsync<AuthResponse>();
                var newAccessToken = authResponse?.Token;
                var newRefreshToken = authResponse?.RefreshToken;

                if (!string.IsNullOrEmpty(newAccessToken))
                {
                    // Atualiza os tokens nos cookies
                    await JSRuntime.InvokeVoidAsync("setCookie", "accessToken", newAccessToken, 1);
                    if (!string.IsNullOrEmpty(newRefreshToken)) // Opcional: se o servidor retornar um novo refresh token
                    {
                        await JSRuntime.InvokeVoidAsync("setCookie", "refreshToken", newRefreshToken, 7);
                    }

                    Console.WriteLine("Token renovado com sucesso.");
                 
                }
            }
            else
            {
                Console.WriteLine("Falha ao renovar o token. Redirecionando para login.");
 
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao renovar token: {ex.Message}");
   
        }
    }

    // Modelos ajustados
    public class AuthResponse
    {
        public string Token { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }

    public class LoginModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }

    public class RefreshTokenRequest
    {
        public string AccessToken { get; set; } = string.Empty;
        public string RefreshToken { get; set; } = string.Empty;
    }
}