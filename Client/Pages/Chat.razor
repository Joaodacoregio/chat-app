@page "/chat"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<HeadContent>
    <link rel="stylesheet" href="css/message.css">
</HeadContent>

<div class="chat-box">
    <!-- Botão Dropdown -->
    <div class="dropdown position-absolute" style="top: 10px; right: 10px; z-index: 1050;">
        <button class="btn btn-primary" @onclick="ToggleUsersList">☰</button>
    </div>

    <!-- Box de Informações -->
    <div class="info-box">
        <h5 class="text-center">Connected Users</h5>
        <ul class="list-unstyled mb-0">
            @foreach (var user in connectedUsers)
            {
                <li class="alert alert-secondary mb-2">@user</li>
            }
            <button class="btn btn-outline-danger" @onclick="SignOut">Sign Out</button>
        </ul>
    </div>

    <ul class="list-unstyled flex-grow-1 overflow-auto" @ref="chatBoxRef">
        @if (messages.Count == 0)
        {
            <li class="alert alert-info">Nenhuma mensagem ainda.</li>
        }
        else
        {
            @foreach (var msg in messages)
            {
                <li class="@(msg.userName == currentUserName ? "alert message-current-user mb-2" : "alert message-other-user mb-2")">
                    <span>@($"{msg.userName}: {msg.content}")</span>
                    <div class="message-timestamp">@msg.timestamp</div>
                </li>
            }
        }
    </ul>

    <div class="chat-input-box">
        <div class="input-group">
            <input type="text" class="form-control rounded-start p-3" style="height: 60px;" @bind="message" placeholder="Type your message..." @onkeydown="OnEnterKeyDown" />
            <button class="btn btn-primary rounded-end" style="height: 60px;" @onclick="SendMessage">Send</button>
        </div>
    </div>
</div>

@code {
    private string message = "";
    private HubConnection? _hubConnection;
    private List<string> connectedUsers = new List<string>();
    private List<MessageData> messages = new List<MessageData>();
    private bool isUsersListVisible = false;
    private ElementReference chatBoxRef;
    private string currentUserName = ""; 

    // Classe que eu usei para representar o JSON
    private class MessageData
    {
        public string userName { get; set; } = "";
        public string content { get; set; } = "";
        public string timestamp { get; set; } = "";
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("http://192.168.1.162:5000/chatHub")
                .Build();

            // Receber mensagens em tempo real
            _hubConnection.On<string>("ReceiveMessage", (messageJson) =>
            {
                var msg = System.Text.Json.JsonSerializer.Deserialize<MessageData>(messageJson);
                InvokeAsync(async () =>
                {
                    messages.Add(msg);
                    StateHasChanged();
                    await ScrollToBottom();
                });
            });

            // Receber histórico de mensagens
            _hubConnection.On<string>("ReceivePastMessages", (pastMessagesJson) =>
            {
                var pastMessages = System.Text.Json.JsonSerializer.Deserialize<List<MessageData>>(pastMessagesJson);
                InvokeAsync(async () =>
                {
                    messages.Clear();
                    messages.AddRange(pastMessages);
                    StateHasChanged();
                    await ScrollToBottom();
                });
            });

            // Receber lista de usuários conectados
            _hubConnection.On<string>("ConnectedUsers", (usersJson) =>
            {
                var users = System.Text.Json.JsonSerializer.Deserialize<List<string>>(usersJson);
                InvokeAsync(() =>
                {
                    connectedUsers.Clear();
                    connectedUsers.AddRange(users);
                    StateHasChanged();
                });
            });

            _hubConnection.On<string>("SetCurrentUser", (userName) =>
            {
                currentUserName = userName;
                StateHasChanged();
            });


            // Novo usuário conectado
            _hubConnection.On<string>("UserConnected", (userJson) =>
            {
                var data = System.Text.Json.JsonSerializer.Deserialize<dynamic>(userJson);
                string userName = data.userName;
                InvokeAsync(() =>
                {
                    connectedUsers.Add(userName);
                    StateHasChanged();
                });
            });

            // Usuário desconectado
            _hubConnection.On<string>("UserDisconnected", (userJson) =>
            {
                var data = System.Text.Json.JsonSerializer.Deserialize<dynamic>(userJson);
                string userName = data.userName;
                InvokeAsync(() =>
                {
                    connectedUsers.Remove(userName);
                    StateHasChanged();
                });
            });

            // Obter o token e decodificar o nome do usuário atual
            var token = await GetCookieAsync("authToken");
            await _hubConnection.StartAsync();
            await _hubConnection.InvokeAsync("UserConnected", token);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error connecting to SignalR Hub: {ex.Message}");
        }
    }

  

    private async Task<string> GetCookieAsync(string name)
    {
        return await JSRuntime.InvokeAsync<string>("getCookie", name);
    }

    private async Task SendMessage()
    {
        if (_hubConnection != null && !string.IsNullOrEmpty(message))
        {
            try
            {
                var token = await GetCookieAsync("authToken");
                await _hubConnection.SendAsync("SendMessage", message, token);
                message = "";
                StateHasChanged();
                await ScrollToBottom();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error sending message: {ex.Message}");
            }
        }
    }

    private async Task OnEnterKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendMessage();
        }
    }

    private void ToggleUsersList()
    {
        isUsersListVisible = !isUsersListVisible;
        StateHasChanged();
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(1);
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", chatBoxRef);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Scroll failed: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }
    }

    private async Task SignOut()
    {
        await JSRuntime.InvokeVoidAsync("removeCookie", "authToken");
        Navigation.NavigateTo("/login");
    }
}