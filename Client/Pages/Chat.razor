@page "/chat"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IJSRuntime jsruntime

 
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<h1 class="text-primary text-center" style="margin-bottom:2rem;">Chat</h1>



<div class="container d-flex flex-column vh-100">
    <div class="chat-box h-50 overflow-auto p-3 border rounded bg-light d-flex flex-column">
        <ul class="list-unstyled flex-grow-1 overflow-auto">
            @foreach (var msg in messages)
            {
                <li class="alert alert-secondary">@msg</li>
            }
        </ul>

        <div class="chat-input-box mt-auto w-100">
            <div class="input-group">
                <input type="text" class="form-control rounded-start p-3" style="height: 60px;" @bind="message" placeholder="Digite sua mensagem..." @onkeydown="OnEnterKeyDown" />
                <button class="btn btn-primary rounded-end" style="height: 60px;" @onclick="SendMessage">Enviar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string message = "";
    private List<string> messages = new List<string>();
    private HubConnection? _hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("http://localhost:5026/chatHub")
                .Build();

            _hubConnection.On<string>("ReceiveMessage", (message) =>
            {
                InvokeAsync(() =>
                {
                    messages.Add(message);
                    StateHasChanged();
                });
            });

            await _hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao conectar no SignalR Hub: {ex.Message}");
        }
    }

    private async Task<string> GetCookieAsync(string name)
    {
        return await jsruntime.InvokeAsync<string>("getCookie", name);
    }

    private async Task SendMessage()
    {
        if (_hubConnection != null && !string.IsNullOrEmpty(message))
        {
            try
            {
                var token = await GetCookieAsync("authToken");
                await _hubConnection.SendAsync("SendMessage", message, token);
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao enviar a mensagem: {ex.Message}");
            }
        }
    }

    private void OnEnterKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }
    }
}
