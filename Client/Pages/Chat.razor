@page "/chat"
@attribute [Authorize]
@inject NavigationManager Navigation
@inject IJSRuntime jsruntime

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css">

<div class="container-fluid d-flex flex-column" style="margin-top: 1rem;">
    <!-- Chat -->
    <div class="chat-box overflow-auto p-3 border rounded bg-light d-flex flex-column position-relative" style="height: 70vh;">
        <!-- Botão Dropdown -->
        <div class="dropdown position-absolute" style="top: 10px; right: 10px; z-index: 1050;">
            <button class="btn btn-primary" @onclick="ToggleUsersList">
                &#9776;
            </button>
        </div>

        <!-- Box de Informações -->
        <div class="info-box bg-light border rounded p-3 position-absolute" style="display: @(isUsersListVisible ? "block" : "none"); width: 400px; height: 400px; top: 50px; right: 10px; overflow-y: auto; z-index: 1040;">
            <h5 class="text-center">Usuários Conectados</h5>
            <ul class="list-unstyled mb-0">
                @foreach (var user in connectedUsers)
                {
                        <li class="alert alert-secondary mb-2">@user</li>
                }
            </ul>
        </div>

        <ul class="list-unstyled flex-grow-1 overflow-auto">
            @foreach (var msg in messages)
            {
                    <li class="alert alert-secondary">@msg</li>
            }
        </ul>

        <div class="chat-input-box mt-auto w-100">
            <div class="input-group">
                <input type="text" class="form-control rounded-start p-3" style="height: 60px;" @bind="message" placeholder="Digite sua mensagem..." @onkeydown="OnEnterKeyDown" />
                <button class="btn btn-primary rounded-end" style="height: 60px;" @onclick="SendMessage">Enviar</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string message = "";
    private HubConnection? _hubConnection;
    private List<string> connectedUsers = new List<string>();
    private List<string> messages = new List<string>();
    private bool isUsersListVisible = false; // Controle para visibilidade da lista de usuários

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _hubConnection = new HubConnectionBuilder()
                .WithUrl("http://192.168.1.162:5000/chatHub")
                .Build();

            _hubConnection.On<string>("ReceiveMessage", (message) =>
            {
                InvokeAsync(() =>
                {
                    messages.Add(message);
                    StateHasChanged();
                });
            });

            _hubConnection.On<List<string>>("ConnectedUsers", (users) =>
            {
                InvokeAsync(() =>
                {
                    connectedUsers.Clear();
                    connectedUsers.AddRange(users);
                    StateHasChanged();
                });
            });

            _hubConnection.On<string>("UserConnected", (userName) =>
            {
                InvokeAsync(() =>
                {
                    connectedUsers.Add(userName);
                    StateHasChanged();
                });
            });

            _hubConnection.On<string>("UserDisconnected", (userName) =>
            {
                InvokeAsync(() =>
                {
                    connectedUsers.Remove(userName);
                    StateHasChanged();
                });
            });

            var token = await GetCookieAsync("authToken");
            await _hubConnection.StartAsync();
            await _hubConnection.InvokeAsync("UserConnected", token);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao conectar no SignalR Hub: {ex.Message}");
        }
    }

    private async Task<string> GetCookieAsync(string name)
    {
        return await jsruntime.InvokeAsync<string>("getCookie", name);
    }

    private async Task SendMessage()
    {
        if (_hubConnection != null && !string.IsNullOrEmpty(message))
        {
            try
            {
                var token = await GetCookieAsync("authToken");
                await _hubConnection.SendAsync("SendMessage", message, token);
                message = "";
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Erro ao enviar a mensagem: {ex.Message}");
            }
        }
    }

    private void OnEnterKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            SendMessage();
        }
    }

    private void ToggleUsersList()
    {
        isUsersListVisible = !isUsersListVisible;
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }
    }
}
