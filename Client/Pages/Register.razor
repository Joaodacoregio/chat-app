@page "/register"
@inject NavigationManager Navigation
@inject HttpClient Http
@inject IJSRuntime JS

<HeadContent>
    <link rel="stylesheet" href="css/autenticationForm.css">
</HeadContent>

<body>
    <div class="login-container">
        <div class="login-header">
            <i class="fa fa-user-plus"></i> Criar conta
        </div>
        <hr>

        <EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
            <DataAnnotationsValidator />

            <!-- Email -->
            <div class="form-group input-icon-left">
                <i class="fa fa-envelope"></i>
                <InputText type="email" class="form-control" @bind-Value="registerModel.Email" placeholder="Digite seu email" required />
            </div>

            <!-- Senha -->
            <div class="form-group input-icon-left password-container">
                <i class="fa fa-lock"></i>
                <InputText type="@passwordType" class="form-control" @bind-Value="registerModel.Password" placeholder="Crie uma senha" required />
                <button type="button" class="toggle-password" @onclick="TogglePasswordVisibility">
                    <i class="fa fa-eye"></i>
                </button>
            </div>

            <!-- Confirmar Senha -->
            <div class="form-group input-icon-left password-container">
                <i class="fa fa-lock"></i>
                <InputText type="@confirmPasswordType" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Confirme sua senha" required />
                <button type="button" class="toggle-password" @onclick="ToggleConfirmPasswordVisibility">
                    <i class="fa fa-eye"></i>
                </button>
            </div>

            <!-- Apelido -->
            <div class="form-group input-icon-left">
                <i class="fa fa-user"></i>
                <InputText type="text" class="form-control" @bind-Value="registerModel.Nickname" placeholder="Escolha um apelido" required />
            </div>

            <!-- Foto (Opcional) -->
            <div class="form-group">
                <label for="photo" class="form-label">Foto de perfil (opcional):</label>
                <InputFile class="form-control" @bind-Value="registerModel.Photo" />
            </div>

            <button type="submit" class="btn btn-primary">Registrar</button>
        </EditForm>

        <div class="login-footer">
            <span>Já tem uma conta? <a href="/login">Entre nela aqui!</a></span>
        </div>
    </div>

</body>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string passwordType = "password";
    private string confirmPasswordType = "password";
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "As senhas não coincidem.";
            await ShowErrorModal();
            return;
        }

        string hashedPassword = ComputeSha256Hash(registerModel.Password);

        var content = new StringContent(
            JsonSerializer.Serialize(new
            {
                Email = registerModel.Email,
                Password = hashedPassword,
                Nickname = registerModel.Nickname
            }),
            Encoding.UTF8,
            "application/json"
        );

        var response = await Http.PostAsync("api/auth/register", content);

        if (response.IsSuccessStatusCode)
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "success",
                title = "Registro realizado com sucesso",
                text = "Você foi registrado com sucesso! Faça login para acessar.",
                confirmButtonText = "OK"
            });
            Navigation.NavigateTo("/login");
        }
        else
        {
            var errorMessageResponse = await response.Content.ReadAsStringAsync();
            errorMessage = "Erro: " + errorMessageResponse;
            await ShowErrorModal();
        }
    }

    private async Task ShowErrorModal()
    {
        if (!string.IsNullOrEmpty(errorMessage))
        {
            await JS.InvokeVoidAsync("Swal.fire", new
            {
                icon = "error",
                title = "Oops...",
                text = errorMessage,
                confirmButtonText = "OK",
                width = "15%",  // Tamanho personalizado do modal
                height = "15%"
            });
        }
    }


    private void TogglePasswordVisibility()
    {
        passwordType = passwordType == "password" ? "text" : "password";
    }

    private void ToggleConfirmPasswordVisibility()
    {
        confirmPasswordType = confirmPasswordType == "password" ? "text" : "password";
    }

    private static string ComputeSha256Hash(string rawData)
    {
        using (SHA256 sha256Hash = SHA256.Create())
        {
            byte[] bytes = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(rawData));
            StringBuilder builder = new StringBuilder();
            for (int i = 0; i < bytes.Length; i++)
            {
                builder.Append(bytes[i].ToString("x2"));
            }
            return builder.ToString();
        }
    }

    public class RegisterModel
    {
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
        public string Nickname { get; set; } = string.Empty;
        public IBrowserFile? Photo { get; set; } // Para a foto de perfil
    }
}
